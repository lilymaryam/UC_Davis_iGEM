#!/usr/bin/env python3

import argparse
import random
import motiflib

extended_help = """
%(prog)s is a program that simulates promoter regions by embedding binding sites
in random sequences. The sites are randomly generated from a motif described in
JASPAR format and the sequences are generated by simple base composition.
"""

parser = argparse.ArgumentParser(
	description='Embeds instances of a motif into random sequences',
	epilog=extended_help)
parser.add_argument('--jasparfile', required=True, type=str,
	metavar='<str>', help='jaspar file')
parser.add_argument('--numseq', required=False, type=int, default=10,
	metavar='<int>', help='number of sequences to generate [%(default)i]')
parser.add_argument('--seqlen', required=False, type=int, default=100,
	metavar='<int>', help='length of sequences to generate [%(default)i]')
parser.add_argument('--mps', required=False, type=int, default=1,
	metavar='<int>', help='number of motifs per seqeunce [%(default)i]')
parser.add_argument('--freq', required=False, type=float, default=0.9,
	metavar='<float>', help='optional floating point argument [%(default).3f]')	
parser.add_argument('--PA', required=False, type=float, default=0.25,
	metavar='<float>', help='optional floating point argument [%(default).3f]')
parser.add_argument('--PC', required=False, type=float, default=0.25,
	metavar='<float>', help='optional floating point argument [%(default).3f]')
parser.add_argument('--PG', required=False, type=float, default=0.25,
	metavar='<float>', help='optional floating point argument [%(default).3f]')
parser.add_argument('--PT', required=False, type=float, default=0.25,
	metavar='<float>', help='optional floating point argument [%(default).3f]')
parser.add_argument('--bothstrands', action='store_true',
	help='on/off switch')
arg = parser.parse_args()

def generate_seq(numseq, seqlen, PA, PC, PG, PT):
	seq = []
	for i in range(0,arg.seqlen):
		r  = random.random()
		if r < PA:             seq += 'a'
		elif r < PA + PC:      seq += 'c'
		elif r < PA + PC + PG: seq += 'g'
		else:                  seq += 't'
	return seq

motif = motiflib.read_JASPAR(arg.jasparfile)
for i in range(0, arg.numseq):
	seq = (generate_seq(arg.numseq, arg.seqlen, arg.PA, arg.PC, arg.PG, arg.PT))
	r = random.random()
	places = []
	if r < arg.freq:
		for j in range(0,arg.mps):
			site = motiflib.generate_site(motif)
			assert(len(motif)== len(site))
			place = random.randint(0, len(seq)-len(motif))
			places.append(f'{place}+')
			for k in range(0,len(site)):
				seq[place+k] = site[k]
	print(f'>seq-{i} {places}')
	print(''.join(seq))
